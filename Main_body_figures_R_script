### This script contains the R code that was used to produce figures for the NS5 marine group manuscript. 
### Not all figures were made in R but above each section of code, the figure name and title is included for reference. 
### On this repository are the necessary tables which are used throughout this script. Therefore, the code should refer directly to a file available on this repository

#### NS5 manuscript figures by Taylor Priest
####

###########
### Figure 1 - Phylogenetic tree reconstruction of the NS5 marine group
# Plot was not created in R

###########
### Figure 2 - Visualisation of cells from NS5_A and NS5_F
# Plot was not created in R

###########
### Figure 3 - Three select species that represent different distrbution types 
### observed across the NS5 and their dynamics across abiotic parameters
# Load necessary libraries
library(ggplot2)
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")

# PART A
# Import data
select_tara_meta=read.table("three_select_species_rpkm_and_tara_meta.csv",header=TRUE, sep = ",",as.is=TRUE)
View(select_tara_meta)

# generate world map
world_1 <- sf::st_as_sf(rworldmap::getMap(resolution = "low"))
sf::sf_use_s2(FALSE)

# Define order of variables and colour palette
select_tara_meta$layer <- factor(select_tara_meta$layer, levels = c("Surface", "DCM", "Mesopelagic"))
colourCount=length(unique(select_tara_meta$MAG))
cbp2 <- c("#A17724ff", "#9e9cc2ff", "#f4d4d4ff")

# Base plot
distrib <- ggplot(data = world_1) +
  geom_sf() +
  theme_bw() + 
  coord_sf(expand = FALSE) + 
  scale_x_continuous(breaks = c(-90, 0, 90)) + 
  scale_y_continuous(breaks = c(-50, 0, 50)) + 
  labs(x = "Longitude", y = "Latitude") +
  geom_point(data=select_tara_meta, 
             aes(x=Longitude, y=Latitude, size=RPKM, colour = MAG)) + 
  scale_colour_manual(values=cbp2) + 
  scale_size(range=c(1,6), breaks=c(0, 3, 6, 9, 12, 15), name = "RPKM") +
  theme(panel.grid.major = element_line(colour = "gray", linetype = "dashed", size = 0.1), 
        panel.background = element_rect(colour = "black", fill="white"), 
        legend.key = element_blank())

# Faceted plot
distribution_rep_map <- distrib + facet_grid(MAG~layer) + 
  theme(strip.background = element_rect(colour="black", fill="white"), 
        strip.text.x = element_text(size = 12, face = "bold"), 
        strip.text.y = element_text(size = 8, face = "bold"),
        legend.text = element_text(size=12),
        legend.title = element_text(size = 14, face = "bold"),
        axis.title.x = element_text(size = 14, face = "bold"),
        axis.title.y = element_text(size = 14, face ="bold"),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)) 

# PART B
# Define colours
colourCount=length(unique(select_tara_meta$MAG))

# Base plot for temperature
select_species_temp <- ggplot(select_tara_meta, aes(x=RPKM, y=Temperature)) + 
  geom_point(aes(colour=factor(MAG)), size=2) +
  #scale_y_reverse() + 
  labs(y="Temperature (°C)", x="RPKM", colour="MAG") + 
  theme_bw() + 
  theme(panel.background = element_rect(fill = "white", color="black"),
        panel.grid.major.y = element_line(colour="grey95"),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(), 
        panel.grid.minor.x = element_blank(),
        legend.position = "right", 
        legend.text = element_text(size=12),
        legend.title = element_text(size = 12, face = "bold"), 
        axis.title.x = element_text(size = 14, face = "bold"), 
        axis.title.y = element_text(size = 14, face = "bold"), 
        axis.text.x = element_text(size = 10, face = "bold", colour = "black"), 
        axis.text.y = element_text(size = 10, colour = "black"),
        plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) + 
  #scale_colour_manual(values = ns5_col) + 
  guides(colour = guide_legend(override.aes = list(size=5), ncol=1)) + 
  scale_colour_manual(values=cbp2)

# Base plot for salinity
select_species_salinity <- ggplot(select_tara_meta, aes(x=RPKM, y=Salinity)) + 
  geom_point(aes(colour=factor(MAG)), size=2) +
  #scale_y_reverse() + 
  labs(y="Salinity (psu)", x="RPKM", colour="MAG") + 
  theme_bw() + 
  theme(panel.background = element_rect(fill = "white", color="black"),
        panel.grid.major.y = element_line(colour="grey95"),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(), 
        panel.grid.minor.x = element_blank(),
        legend.position = "right", 
        legend.text = element_text(size=12),
        legend.title = element_text(size = 12, face = "bold"), 
        axis.title.x = element_text(size = 14, face = "bold"), 
        axis.title.y = element_text(size = 14, face = "bold"), 
        axis.text.x = element_text(size = 10, face = "bold", colour = "black"), 
        axis.text.y = element_text(size = 10, colour = "black"),
        plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) + 
  #scale_colour_manual(values = ns5_col) + 
  guides(colour = guide_legend(override.aes = list(size=5), ncol=1)) + 
  scale_colour_manual(values=cbp2)

# Base plot for nitrogen species
select_species_nitrogen <- ggplot(select_tara_meta, aes(x=RPKM, y=Nitrate_nitrite)) + 
  geom_point(aes(colour=factor(MAG)), size=2) +
  #scale_y_reverse() + 
  labs(y="Nitrate + nitrite (µM)", x="RPKM", colour="MAG") + 
  theme_bw() + 
  theme(panel.background = element_rect(fill = "white", color="black"),
        panel.grid.major.y = element_line(colour="grey95"),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(), 
        panel.grid.minor.x = element_blank(),
        legend.position = "right", 
        legend.text = element_text(size=12),
        legend.title = element_text(size = 12, face = "bold"), 
        axis.title.x = element_text(size = 14, face = "bold"), 
        axis.title.y = element_text(size = 14, face = "bold"), 
        axis.text.x = element_text(size = 10, face = "bold", colour = "black"), 
        axis.text.y = element_text(size = 10, colour = "black"),
        plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) + 
  #scale_colour_manual(values = ns5_col) + 
  guides(colour = guide_legend(override.aes = list(size=5), ncol=1)) + 
  scale_colour_manual(values=cbp2)

# Base plot for oxygen
select_species_oxygen <- ggplot(select_tara_meta, aes(x=RPKM, y=Oxygen)) + 
  geom_point(aes(colour=factor(MAG)), size=2) +
  #scale_y_reverse() + 
  labs(y="Oxygen (µM)", x="RPKM", colour="MAG") + 
  theme_bw() + 
  theme(panel.background = element_rect(fill = "white", color="black"),
        panel.grid.major.y = element_line(colour="grey95"),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(), 
        panel.grid.minor.x = element_blank(),
        legend.position = "right", 
        legend.text = element_text(size=12),
        legend.title = element_text(size = 12, face = "bold"), 
        axis.title.x = element_text(size = 14, face = "bold"), 
        axis.title.y = element_text(size = 14, face = "bold"), 
        axis.text.x = element_text(size = 10, face = "bold", colour = "black"), 
        axis.text.y = element_text(size = 10, colour = "black"),
        plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm")) + 
  #scale_colour_manual(values = ns5_col) + 
  guides(colour = guide_legend(override.aes = list(size=5), ncol=1)) + 
  scale_colour_manual(values=cbp2)

# Use ggarrange to organise the four abiotic variable plots together that make up PART B
rpkm_vs_abiotic_variables <- ggarrange(select_species_temp + rremove("xlab"), select_species_salinity + rremove("xlab"),
                                       select_species_nitrogen, select_species_oxygen, 
                                       ncol=2, nrow=2, align="v", common.legend = TRUE, 
                                       legend = c("right")) + 
  theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))

# Use ggarrange to organise PART A and PART B into a single plot
figure_3 <- ggarrange(distribution_rep_map, rpkm_vs_abiotic_variables, 
                      labels=c("a", "b"), ncol=1, nrow=2, align="v") + 
  theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"))

# Save plot
pdf(file = "Figure_3.pdf", width = 14, height = 14)
figure_3
dev.off()


###########
### Figure 4 - Temporal dynamics of NS5 species-representatives in surfce waters at 
### Helgoland Roads, North Sea
# Import necessary libraries
library(ggplot2)
library(reshape2)
library(scales)

# Import data
NS5_Helg=read.table("NS5_MAG_Helgoland_oligo_counts_100_mod_2010_2012_rel.csv",header=TRUE, sep = ",",as.is=TRUE)
View(NS5_Helg)

# Transpose to long format
NS5_Helg_long <- melt(NS5_Helg, id.vars=c("Date", "year"), variable.name="MAG", value.name="abund")
View(NS5_Helg_long)

# Define variables
NS5_Helg_long$Date <- as.Date(NS5_Helg_long$Date, format="%Y.%m.%d")
NS5_Helg_long$julian <- format(NS5_Helg_long$Date, "%j")
NS5_Helg_long$julian <- as.Date(NS5_Helg_long$julian, format="%j")
MAG <- NS5_Helg_long$MAG
abund <- NS5_Helg_long$abund
year <- NS5_Helg_long$year

oligo_cols <- c("#44aa00", "#784421", "#decd87", "#ffe680", "#0044aa", "#87cdde")

# Base plot
base_oligo = ggplot(NS5_Helg_long, aes(x=julian, y=abund)) + 
  geom_bar(aes(fill=MAG), stat="identity", position="stack", width=1.6) + 
  labs(y="Relative Abundance (%)", fill = "NS5 species representatives") + 
  scale_x_date(labels=date_format("%d-%m"), date_breaks = "3 weeks") + 
  #scale_fill_viridis(option="magma", discrete=TRUE)
  scale_fill_manual(values=oligo_cols)

# Facet plot
facet_oligo = base_oligo + facet_grid(year~., scales = "free") + 
  theme(panel.background = element_rect(fill = "white", color="black"), #
        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        legend.position = "right", 
        strip.placement = "outside", 
        panel.spacing = unit(0, "lines"), 
        strip.background = element_rect(colour="black", fill="white"), 
        strip.text.y = element_text(size = 12, face = "bold"),
        legend.text = element_text(size=10),
        legend.title = element_text(size = 12, face = "bold"), 
        axis.title.x = element_blank(), 
        axis.title.y = element_text(size = 14, face = "bold"), 
        axis.text.x = element_text(size = 8, face = "bold", colour = "black", angle=20, hjust=0.95), 
        axis.text.y = element_text(size = 8, colour = "black")) + 
  guides(fill=guide_legend(ncol=1))

# Save figure
pdf(file="Figure_4.pdf", width = 10, height = 6)
facet_oligo
dev.off()


###########
### Figure 5 - boxplot of summary statistics

# Import libraries
library(ggplot2)
library(ggpubr)

# Import data
ns5_mags = read.table("mag_statistics_r.csv",header=TRUE, sep = ",",as.is=TRUE)
View(ns5_mags)

# Define colour palette
cbp1 <- c("#383745ff", "#A17724ff", "#9e9cc2ff", "#f4d4d4ff")

# Completeness plot
ns5_comp_box <- ggplot(ns5_mags, aes(x=genus, y=completeness, colour=genus)) + 
  geom_boxplot(outlier.colour="black", outlier.shape=16, lwd = 1) + 
  geom_dotplot(binaxis='y', stackdir='center', dotsize=1) + 
  theme(legend.position="none") + 
  scale_colour_manual(values = c(cbp1)) + 
  theme_bw() + 
  theme(legend.position = "none",
        axis.text.x= element_text(size=14, face="bold"),
        axis.text.y = element_text(size=14),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=16, face="bold"),
        panel.background = element_rect(fill = "white", color="black"), 
        panel.grid.minor = element_blank()) + 
  labs(y="Completeness (%)")

# Contamination plot
ns5_cont_box <- ggplot(ns5_mags, aes(x=genus, y=contamination, colour=genus)) + 
  geom_boxplot(outlier.colour="black", outlier.shape=16, lwd = 1) + 
  geom_dotplot(binaxis='y', stackdir='center', dotsize=1) + 
  theme(legend.position="none") + 
  scale_colour_manual(values = c(cbp1)) + 
  theme_bw() + 
  theme(legend.position = "none",
        axis.text.x= element_text(size=14, face="bold"),
        axis.text.y = element_text(size=14),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=16, face="bold"),
        panel.background = element_rect(fill = "white", color="black"), 
        panel.grid.minor = element_blank()) + 
  labs(y="Contamination (%)")

# Genome size plot
ns5_size_box <- ggplot(ns5_mags, aes(x=genus, y=genome_size, colour=genus)) + 
  geom_boxplot(outlier.colour="black", outlier.shape=16, lwd = 1) + 
  geom_dotplot(binaxis='y', stackdir='center', dotsize=1) + 
  theme(legend.position="none") + 
  scale_colour_manual(values = c(cbp1)) + 
  theme_bw() + 
  theme(legend.position = "none",
        axis.text.x= element_text(size=14, face="bold"),
        axis.text.y = element_text(size=14),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=16, face="bold"),
        panel.background = element_rect(fill = "white", color="black"), 
        panel.grid.minor = element_blank()) + 
  labs(y="Genome size (Mbp)")

# GC plot
ns5_gc_box <- ggplot(ns5_mags, aes(x=genus, y=GC, colour=genus)) + 
  geom_boxplot(outlier.colour="black", outlier.shape=16, lwd = 1) + 
  geom_dotplot(binaxis='y', stackdir='center', dotsize=1) + 
  theme(legend.position="none") + 
  scale_colour_manual(values = c(cbp1)) + 
  theme_bw() + 
  theme(legend.position = "none",
        axis.text.x= element_text(size=14, face="bold"),
        axis.text.y = element_text(size=14),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=16, face="bold"),
        panel.background = element_rect(fill = "white", color="black"), 
        panel.grid.minor = element_blank()) + 
  labs(y="GC content (%)")

# Use ggarrange to align plots into a single figure
boxplot_summary <- ggarrange(ns5_comp_box, ns5_cont_box, ns5_size_box, ns5_gc_box, labels=c("a", "b", "c", "d"), 
          ncol=2, nrow=2, align="v")

# Save figure
pdf(file="Figure_5.pdf", width = 10, height = 6)
boxplot_summary
dev.off()


###########
### Figure 6: Comparison of substrate utilisation gene composition between species-representatives

# Import necessary libraries
library(dendsort)
library(ggplot2)
library(ggdendro)
library(RColorBrewer)
library(vegan)
library(ggpubr)
library(ggrepel)
library(dendextend)
library(dplyr)

# Import data
NS5_cazy = read.table("NS5_species_reps_substrate_genes_all.csv",header=TRUE, sep = ",", row.names = 1, as.is=TRUE)
View(NS5_cazy)
NS5_meta = read.table("NS5_species_reps_substrate_genes_all_groups.csv",header=TRUE, sep = ",", as.is=TRUE)
View(NS5_meta)

# PART A
# Calculate distance matrix based on CAZyme composition and calculate dendrogram
NS5_cazy_bray<-vegdist(NS5_cazy, distance = "bray", na.rm=TRUE)
clus1 <- hclust(NS5_cazy_bray, method="complete")
cazy_all_dendrogram <- as.dendrogram(clus1)

# Extract dendrogram data
dendrogram_data <- dendro_data(cazy_all_dendrogram)
dendrogram_segments <- dendrogram_data$segments
dendrogram_ends <- dendrogram_segments %>%
  filter(yend == 0) %>% # filter for terminal dendrogram ends
  left_join(dendrogram_data$labels, by = "x") %>% # .$labels contains the row names from dist_matrix (i.e., sample_name)
  rename(mag = label) %>%
  left_join(NS5_meta, by = "mag") 

# dataframe now contains only terminal dendrogram segments and merged associated metadata

# Assign colours to groups
genus_color <- c("NS5_A" = "#383745ff", "NS5_B" = "#a17724ff", "NS5_D" = "#9e9cc2ff", "NS5_F" = "#f4d4d4ff")

# Plot dendrogram with dendrogram ends coloured according to genus
par(mfrow=c(1,1))

NS5_cazy_dendrogram <- ggplot() + 
  geom_segment(data = dendrogram_segments, aes(x=x, y=y, xend=xend, yend=yend)) +
  geom_segment(data = dendrogram_ends, aes(x=x, y=y.x, xend=xend, yend=yend, color = Genus), size = 2) + 
  #geom_text(data = dendogram_ends, aes(x=x, y=y.x, label=location), hjust=1, nudge_y = 1) + ##this line can be used to add MAG names to dendrogram segments 
  geom_point(data=dendrogram_ends, aes(x=x, y=y.y, shape=Isolation_source), position = 
               position_nudge(y=0.02), size=4) + 
  scale_color_manual(values = genus_color) + 
  scale_shape_manual(values=c(19, 6, 15, 17, 5, 0, 1, 2, 7, 23)) + 
  scale_y_reverse() +
  coord_flip() + 
  guides(color=FALSE) + 
  ylab("Distance") + xlab("Species") + # flipped x and y coordinates for aesthetic reasons 
  theme_bw() + 
  theme(legend.position = "none",
        axis.text.y = element_blank(),
        axis.text.x = element_text(colour = "black", size = 10), 
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

# PART B
# NMDS plot

# Compute NMDS based on bray-curtis dissimilarities and extract data
NS5_cazy_mds<-metaMDS(NS5_cazy_bray, distance="bray")
site_scores = as.data.frame(scores(NS5_cazy_mds, display="sites"))
site_scores = cbind(site_scores, Genus_a=NS5_meta$Genus)
site_scores = cbind(site_scores, bin=row.names(NS5_cazy))
site_scores = cbind(site_scores, Isolation_source_a=NS5_meta$Isolation_source)

# Assign colours
colnames(site_scores) <- c('NMDS1', 'NMDS2', 'Group', 'MAG', 'Source')

# Compute the hull data
hull_A <- site_scores[site_scores$Group == "NS5_A", ][chull(site_scores[site_scores$Group == "NS5_A", c("NMDS1", "NMDS2")]), ]
hull_B <- site_scores[site_scores$Group == "NS5_B", ][chull(site_scores[site_scores$Group == "NS5_B", c("NMDS1", "NMDS2")]), ]
hull_D <- site_scores[site_scores$Group == "NS5_D", ][chull(site_scores[site_scores$Group == "NS5_D", c("NMDS1", "NMDS2")]), ]
hull_F <- site_scores[site_scores$Group == "NS5_F", ][chull(site_scores[site_scores$Group == "NS5_F", c("NMDS1", "NMDS2")]), ]
hull_positions <- rbind(hull_A, hull_B, hull_D, hull_F)

# Plot NMDS
nmds_CAZymes <- ggplot(site_scores) + 
  geom_point(site_scores, mapping = aes(x=NMDS1, y=NMDS2, colour=Group, shape=Source), size=4) + 
  geom_polygon(data=hull_positions, aes(x=NMDS1, y=NMDS2, fill=Group, group=Group), alpha=0.30) + 
  #geom_text_repel(aes(NMDS1, NMDS2, label=bin), size=4) + ## this line can be used to add MAG names to points
  scale_shape_manual(values = c(15, 16, 17, 18, 0, 1, 2, 5, 6, 7)) + 
  scale_color_manual(values = c("NS5_A" = "#383745ff", "NS5_B" = "#a17724ff", "NS5_D" = "#9e9cc2ff", "NS5_F" = "#f4d4d4ff")) + 
  scale_fill_manual(values = c("NS5_A" = "#383745ff", "NS5_B" = "#a17724ff", "NS5_D" = "#9e9cc2ff", "NS5_F" = "#f4d4d4ff")) + 
  coord_fixed() + 
  theme_classic() +
  guides(fill = FALSE) + 
  theme(panel.background = element_rect(fill=NA, colour="black", size=1, linetype="solid")) + 
  labs(colour="Genus", shape = "Isolation_source") + 
  theme(legend.position="right", 
        legend.text=element_text(size=12, colour = "black"), 
        legend.title=element_text(size=14, face = "bold", colour = "black"), 
        axis.title.x = element_text(colour = "black", face = "bold", size = 14), 
        axis.title.y = element_text(colour = "black", face = "bold", size = 14))

# Use ggarrange to align plots into a single figure
Figure_6 <- ggarrange(NS5_cazy_dendrogram, nmds_CAZymes, labels=c("a", "b"), 
                             ncol=2, nrow=1, align="h")


pdf(file="Figure_6.pdf", height = 8, width = 14)
Figure_6
dev.off()


###########
### Figure 7
# This plot is not directly reproducible, as the labelling of genes was performed in InkScape after creation
# However, the PUL structures and associated legends can be produced with this code

# Import necessary libraries
library(ggplot2)
library(gggenes)
library(ggfittext)

# Import data
fram_pul = read.table("NS5_F_representative_puls.csv",header=TRUE, sep = ",",as.is=TRUE)
View(fram_pul)

# Define colours for gene types
pulcol_NS5 <- c("Carbohydrate binding module" = "#c87137", 
                "Glycoside hydrolase" = "#b3de69", "Hypothetical" = "#c8beb7",
                "Carbohydrate esterase" = "#000000", "Kinase" = "#ffeeaa", 
                "Isomerase" = "#ffeeaa", "Peptidase" = "#800080", "Polysaccharide lyase" = "#0095d1",
                "Other" = "#ffffff",
                "Sulfatase" = "#ffcc00", "SusC" = "#ff6600", 
                "SusD" = "#ff00ff", "Transporter" = "#de8787")

ggplot(fram_pul, aes(xmin = start, xmax = stop, y = pul_name, fill = annotation, 
                     forward = Strand)) +
  geom_gene_arrow() + 
  facet_wrap(~ pul_name, scales = "free", ncol = 1) +
  theme_genes() + 
  scale_fill_manual(values = pulcol_NS5) + 
  guides(fill=guide_legend(title = "Gene")) + 
  theme(legend.title = element_text(face = "bold", size = 14),
        legend.text = element_text(size=12))

pdf("Figure_7.pdf", height=10, width=10)
Figure_7
dev.off()


##################################################

##################################################


##################################################
